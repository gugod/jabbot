#!/usr/bin/env perl
use v5.26;
use strict;
use warnings;
use utf8;

use Time::Moment;
use Acme::RandomEmoji qw(random_emoji);
use Image::Randim::Source;
use Mojo::UserAgent;
use Mojo::URL;
use Net::Random;

use FindBin;
use lib "$FindBin::Bin/../lib";
use Jabbot;
use Jabbot::Util qw(time_next_full_moon);
use Jabbot::External::TaiwanReservoir;
use Jabbot::External::FlickrPublicFeed;
use Jabbot::External::NASAIotD;
use Jabbot::Remote;

sub random_emoji_message {
    my $emoji = random_emoji();
    my $url = Mojo::URL->new('https://emojipedia.org/search');
    $url->query( q => $emoji );
    return "今日表情符號： $emoji\n\n$url";
}

sub random_nasa_image {
    my $photos = Jabbot::External::NASAIotD->photos;
    my $photo = $photos->[rand(@$photos)];
    return {
        preview    => $photo->{enclosure_url},
        source_url => $photo->{photo_page_url},
        source     => $photo->{author},
    };
}

sub random_flickr_photo {
    my $photos = Jabbot::External::FlickrPublicFeed->photos;
    my $photo = $photos->[rand(@$photos)];
    return {
        preview    => $photo->{enclosure_url},
        source_url => $photo->{photo_page_url},
        source     => "flickr: $photo->{author}",
    };
}

sub random_unsplash_image {
    my $source = Image::Randim::Source->new;
    $source->set_provider('Unsplash');
    my $image = $source->get_image;
    return {
        preview => $image->url,
        source_url => "https://unsplash.com",
        source => "Unsplash",
    }
}

sub random_image_message {
    my $image = [
        \&random_flickr_photo,
        \&random_unsplash_image,
        \&random_nasa_image,
    ]->[rand(3)]->();
    return "今日選圖： $image->{preview}\n[$image->{source}]($image->{source_url})\n";
}

sub next_full_moon_is_tonight {
    my $t_now = time;
    my $t_fullmoon = time_next_full_moon();

    my $t1 = Time::Moment->from_epoch($t_now)->at_midnight;
    my $t2 = Time::Moment->from_epoch($t_fullmoon)->at_midnight;

    return $t1 == $t2;
}

sub random_reservoir_condition {
    my $o = Jabbot::External::TaiwanReservoir->new;
    my $d = $o->usage_percentage;
    my @rows = sort { $a->{"UsagePercentage"} <=> $b->{"UsagePercentage"} } grep { $_->{"UsagePercentage"} && $_->{"ReservoirName"} =~ /水庫$/; } values %$d;
    my $picked = $rows[rand($#rows)];

    return sprintf(
        '現在 %s 的蓄水量是 %.2f%% 喔。',
        $picked->{"ReservoirName"},
        100*$picked->{"UsagePercentage"}
    );
}

sub post_to_plurk {
    my $messages = shift;

    my $jabbot_plurk = Jabbot::Remote->new({ target => 'plurk' });

    for my $message (@$messages) {
        $jabbot_plurk->post({ body => $message });
        sleep(2);
    }
}

sub maybe_full_moon_message {
    return next_full_moon_is_tonight() ? "今晚是滿月呢。" : "";
}

sub maybe_reservoir_condition {
    my $reservoir = eval { random_reservoir_condition() };
    if ($reservoir) {
        return "🚰 " . $reservoir;
    }
    return "";
}

sub maybe_today_in_history {
    my $o = eval { random_today_in_history() } // "";
    return $o;
}

sub maybe_today_birth {
    return eval { random_today_birth() } // "";
}

sub maybe_today_death {
    return eval { random_today_death() } // "";
}

sub _sections_on_wikipedia_page_today {
    state ($res, $url, $mon, $mday, %section);

    if (defined($res)) {
        return ($url, $mon, $mday, \%section);
    }

    my $tm = Time::Moment->now;
    $mon  = $tm->month;
    $mday = $tm->day_of_month;
    $url  = 'https://zh.wikipedia.org/zh-tw/' . $mon . '%E6%9C%88' . $mday . '%E6%97%A5';

    my $ua = Mojo::UserAgent->new;
    $ua->connect_timeout(15);

    $res = $ua->get($url)->result;

    unless ($res->is_success) {
        die "Failed to fetch wikipedia page: $url";
    }

    $res->dom->at("#toc")->remove;

    my $section;
    $res->dom->at("#mw-content-text")->find("h2,li")->each(
        sub {
            my ($el) = @_;
            if ($el->tag eq "h2") {
                my $title = $el->at(".mw-headline")->all_text;
                $section = $section{$title} = { items => [] };
            } else {
                push @{$section->{items}}, $el;
            }
        }
    );

    return ($url, $mon, $mday, \%section);
}

sub _extract_year_subject_link {
    my ($el) = @_;
    my ($year) = $el->all_text() =~ m/^([0-9]+)年/;
    my $links = $el->find("a");
    my $subject = $links->first(sub { $_->all_text() !~ m/^([0-9]+)年/; });
    return [
        $year,
        $subject->all_text(),
        "https://zh.wikipedia.org" . $subject->attr("href")
    ];
}

sub random_today_birth {
    my ($url, $mon, $mday, $section) = _sections_on_wikipedia_page_today();

    my @items = map { _extract_year_subject_link($_) } @{$section->{"出生"}{items}};
    my $pick = $items[rand(@items)];
    return join(
        "",
        "🎂 ",
        $pick->[0],
        "年${mon}月${mday}日：",
        "[" . $pick->[1] . "]",
        "(" . $pick->[2] . ")",
        "出生"
    );
}

sub random_today_death {
    my ($url, $mon, $mday, $section) = _sections_on_wikipedia_page_today();
    my @items = map { _extract_year_subject_link($_) } @{$section->{"逝世"}{items}};
    my $pick = $items[rand(@items)];
    return join(
        "",
        "⚰ ",
        $pick->[0],
        "年${mon}月${mday}日：",
        "[" . $pick->[1] . "]",
        "(" . $pick->[2] . ")",
        "逝世"
    );
}

sub random_today_in_history {
    my ($url, $mon, $mday, $section) = _sections_on_wikipedia_page_today();

    my @items = grep { /\A[0-9]+年：[^\n]+\z/ } map { $_->all_text } grep { not $_->at("sup.Template-Fact") } @{$section->{"大事記"}{items}};

    return "" unless @items;

    my $pick = $items[rand(@items)];
    $pick =~ s{\A([0-9]+年)：}{$1${mon}月${mday}日：};

    return "\n🕮 [歷史上的今天]($url) ～ $pick\n";
}

sub maybe_wikiquote_of_the_day {
    my $out = "";
    eval {
        my $url = 'https://zh.wikiquote.org/zh-tw/Wikiquote:%E6%AF%8F%E6%97%A5%E5%90%8D%E8%A8%80';
        my $ua = Mojo::UserAgent->new;
        $ua->connect_timeout(15);

        my $res = $ua->get($url)->result;
        my $el = $res->dom->at('.mw-parser-output > div:nth-child(10) > div:nth-child(1)');
        if ($el) {
            my $txt = $el->all_text =~ s/\A\s*(.+)\s*\z/$1/r;
            $out = '❝ ' . $txt . " ❠";
        }
    };
    return $out;
}

sub random_number_message {
    my $nr = Net::Random->new(
        src => ['random.org', 'qrng.anu.edu.au']->[rand(2)],
        min => 0,
        max => 0xFFFFFFFE,
    );

    if (my @numbers = eval { $nr->get(6) }) {
        return("今日亂數：" . join(' ', @numbers));
    }
    return undef;
}

## main

my @messages = grep { defined($_) && /\S/ } (
    maybe_full_moon_message(),
    maybe_reservoir_condition(),
    maybe_today_in_history(),
    maybe_today_birth(),
    maybe_today_death(),
    maybe_wikiquote_of_the_day(),
    random_emoji_message(),
    random_image_message(),
    random_number_message(),
);

say for @messages;

post_to_plurk(\@messages);
